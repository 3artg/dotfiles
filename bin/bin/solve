#!/usr/bin/env python3
import click
import os
import glob
import subprocess

commands = {
    'cpp': 'g++ %s -o run -O2 -Wall -static -std=gnu++17',
    'py': 'python3 -c "import py_compile; py_compile.compile(%s)'
}

@click.command()
@click.argument('filename', type=click.Path(exists=True))
@click.option('-tc', '--testcase-directory', default='testcase', type=click.Path(exists=True))
def solve(filename, testcase_directory):
    src_mtime = os.stat(filename).st_mtime
    bin_mtime = os.stat('run').st_mtime if os.path.isfile('run') else 0
    click.echo(f'src_mtime {src_mtime}')
    click.echo(f'bin_mtime {bin_mtime}')
    if src_mtime < bin_mtime < src_mtime + 300:
        click.echo('Skipping Compile')
    else:
        _, ext = os.path.splitext(filename)
        ext = ext[1:]
        if ext not in commands:
            raise click.ClickException(f'Cannot find compile command ({ext})')
        command = commands[ext]%filename
        click.echo(command)
        return_code = os.system(command)
        if return_code != 0:
            raise click.ClickException('Compile Failed.')

    input_paths = sorted(glob.glob(f'{testcase_directory}/*.in'))
    if len(input_paths) == 0:
        click.echo('No input data! Runtime Mode')
        os.system('./run')
        return
    align_length = max([len(s) for s in input_paths]) - len(testcase_directory) - 3

    for input_path in input_paths:
        output_path = input_path[:-3] + '.out'
        answer_path = input_path[:-3] + '.ans'
        name = input_path[len(testcase_directory):-3]
        with open(input_path, 'r') as input_file, open(output_path, 'w') as output_file:
            result = subprocess.run(['./run'], stdin=input_file, stdout=output_file)

        click.echo(name.rjust(align_length) + ' ', nl=False)
        if result.returncode != 0:
            click.secho('RTE', fg='bright_blue')
        elif not os.path.isfile(answer_path):
            click.secho('? (no ans data)', fg='bright_black')
        elif os.system(f'diff -wB {output_path} {answer_path} > /dev/null') != 0:
            click.secho('TLE', fg='bright_red')
        else:
            click.secho('AC', fg='bright_green')

if __name__ == '__main__':
    solve()
